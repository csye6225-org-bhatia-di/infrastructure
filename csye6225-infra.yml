AWSTemplateFormatVersion: "2010-09-09"

Description: Creating Virtual Private Cloud (VPC), Internet Gateway, Route Tables, and Routes for my profile. 


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroup:
      - Label:
          default: "VPC CIDR"
        Parameters:
          - VirtualPrivateCloudCIDRParameter
      - Label:
          default: "Subnet CIDR"
        Parameters:
          - subnetAParameter
          - subnetBParameter
          - subnetCParameter
      - Label:
          default: "My Image Value"
        Parameters:
          - MyImageParameter    

#Creating Virtual Private Cloud CIDR
Parameters:
  VirtualPrivateCloudCIDRParameter:
    Default: "10.0.0.0/16"
    Type: String
    Description: IP Range for Virtual Private Cloud
  subnetAParameter:
    Default: "10.0.1.0/24"
    Type: String
    Description: Range for Subnet A
  subnetBParameter:
    Default: "10.0.2.0/24"
    Type: String
    Description: Range for Subnet B
  subnetCParameter:
    Default: "10.0.3.0/24"
    Type: String
    Description: Range for Subnet C
  MyImageParameter:
    Default: "ami-003aceb1e55fe8166"
    Type: String
    Description: My Image Parameter  
  PrivateSubnet1CIDR:
    Default: "10.0.4.0/24"
    Type: String
    Description: Please Enter the IP Range for Private Subnet-1
  PrivateSubnet2CIDR:
    Default: "10.0.5.0/24"
    Type: String
    Description: Please Enter the IP Range for Private Subnet-2
  PrivateSubnet3CIDR:
    Default: "10.0.6.0/24"
    Type: String
    Description: Please Enter the IP Range for Private Subnet-3
  DatabaseInstanceIdentifier:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: Instance identifier name
    MaxLength: 60
    MinLength: 1
    Type: String
  DatabaseName:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: Postgres database name
    MaxLength: 64
    MinLength: 1
    Type: String
  dbuserdetails:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Default: csye6225
    MaxLength: 16
    MinLength: 1
    NoEcho: true
    Type: String
  dbpassword:
    AllowedPattern: "[a-zA-Z0-9]*"
    Default: password
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
  dbbackup:
    Default: 0
    MaxValue: 35
    MinValue: 0
    Type: Number
  dbstorage:
    Default: 20
    MaxValue: 65536
    MinValue: 5
    Type: Number
  dbinstancedetails:
    AllowedValues:
      - db.t2.micro
    Default: db.t2.micro
    Type: String
  dbmultiaz:
    AllowedValues:
      - true
      - false
    Default: false
    Type: String
  bucketnameforuse:
    Type: String
    Description: Name of the bucket
    Default: demo.bhatiadi.me  
  regionforbucket:
    Default: "us-east-1"
    Type: String
    Description: Bucket region Access key
  hostedZoneID:
    Description: dev / demo zone id domain
    Default: "Z01096722S5OIW7NXF70F"
    Type: String
  DomainNameParameter:
    Description: domain Name for S3 Bucket Naming
    Type: String
    Default: "demo.bhatiadi.me"
  KeyPairParameter: 
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "DevInstancekey"
    



Resources:
  VirtualPrivateCloudVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VirtualPrivateCloudCIDRParameter
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  #creating Internet Gateway
  InternetGatewayIG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway for VirtualPrivateCloudVPC

  #Attaching above created InternetGatewayIG with VirtualPrivateCloudVPC
  InternetGatewayIGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayIG
      VpcId: !Ref VirtualPrivateCloudVPC

  #PUBLIC SUBNETS
  # Public Subnet-A:
  subnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloudVPC
      CidrBlock: !Ref subnetAParameter
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SubnetA

  # SubnetB:
  subnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloudVPC
      CidrBlock: !Ref subnetBParameter
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SubnetB

  # SubnetC:
  subnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloudVPC
      CidrBlock: !Ref subnetCParameter
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SubnetC

  # Routing Table:
  routingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Routing Table
      VpcId: !Ref VirtualPrivateCloudVPC
  RTPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: PRT
      VpcId: !Ref VirtualPrivateCloudVPC

  # Route in routingTable
  routeA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayIG
      RouteTableId: !Ref routingTable

  # Subnet A to the routingTable:
  subnetAAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routingTable
      SubnetId: !Ref subnetA

   # Subnet B to the routingTable:
  subnetBAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routingTable
      SubnetId: !Ref subnetB

  # Subnet C to the routingTable:
  subnetCAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routingTable
      SubnetId: !Ref subnetC

  privateSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloudVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  #creating Private Subnet-2:
  privateSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloudVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  #creating Private Subnet-3:
  privateSub3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloudVPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet3

  #Attaching the private subnets-1 to the private Route Table:
  privatesub1Associate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RTPrivate
      SubnetId: !Ref privateSub1

  #Attaching the private subnets-2 to the private Route Table:
  privatesub2Associate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RTPrivate
      SubnetId: !Ref privateSub2

  #Attaching the private subnets-3 to the private Route Table:
  privatesub3Associate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RTPrivate
      SubnetId: !Ref privateSub3

  #custom parameter group for RDS
  rdsprameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: postgres12
      Description: Custom Database Parameter Group
      Parameters:
        shared_preload_libraries: "pg_stat_statements"



  #EC2 Security Group
  applicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VirtualPrivateCloudVPC
      GroupDescription: ec2 Security group with ports
      GroupName: applicationSecurityGroup
      SecurityGroupIngress:           
            - IpProtocol : "tcp"
              FromPort : "22"
              ToPort : "22"
              CidrIp : "0.0.0.0/0"         
            - IpProtocol : "tcp"
              FromPort : "3000"
              ToPort : "3000"              
              SourceSecurityGroupId: !Ref loadbalSecGrp
      Tags: 
        - Key: Name
          Value: EC2 Security Group 

  dbsecuritygrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VirtualPrivateCloudVPC
      GroupDescription: RDS Security group with ports
      GroupName: database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref applicationSecurityGroup

  dbsubgrp:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref privateSub1
        - !Ref privateSub2
      Tags:
        - Key: Name
          Value: database subnets

  dbinstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref dbstorage
      AvailabilityZone: !Select [0, !GetAZs ""]
      BackupRetentionPeriod: !Ref dbbackup
      DBInstanceClass: !Ref dbinstancedetails
      DBInstanceIdentifier: !Ref DatabaseInstanceIdentifier
      DBName: !Ref DatabaseName
      DBSubnetGroupName: !Ref dbsubgrp
      Engine: postgres
      EngineVersion: 12.9
      MasterUsername: !Ref dbuserdetails
      MasterUserPassword: !Ref dbpassword
      MultiAZ: !Ref dbmultiaz
      PubliclyAccessible: false
      DBParameterGroupName: !Ref rdsprameterGroup
      VPCSecurityGroups:
        - !Ref dbsecuritygrp

  #creating s3 bucket:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Description: Creating Amazon S3 bucket from CloudFormation
    DeletionPolicy: Delete
    Properties:
      BucketName:
        !Join [
          ".",
          [
            !Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId]]]],
            !Ref bucketnameforuse,
          ],
        ]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            MaxAge: "3600"

  # Allowing EC2 Instances(Launch Config) in the autoscaling group to get access to the latest code in the s3Bucket
  CodeDeployEC2S3Policy:
    Type: "AWS::IAM::ManagedPolicy"
    Description: Policy allowing EC2 instances in auto scaling to read data from S3 buckets
    Properties:
      ManagedPolicyName: CodeDeploy-EC2-S3-Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowGetPutDeleteActionsOnS3BucketCodeDeploy
            Effect: Allow
            Action:
              - "s3:Get*" 
              - "s3:List*"
              - "s3:DeleteObject" 
            Resource: 
              - "arn:aws:s3:::aws-codedeploy-us-east-1/*"
              - "arn:aws:s3:::webservice-code-deploy-bucket"
              - "arn:aws:s3:::webservice-code-deploy-bucket/*"
 


  #creating s3 policy:
  s3policy:
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn: S3Bucket
    Properties:
      ManagedPolicyName: WebAppS3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowGetPutDeleteActionsOnS3Bucket
            Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObject"
              - "s3:PostObject"
            Resource:
                - 'Fn::Join':
                    - ''
                    - - 'arn:aws:s3:::'
                      - Ref: S3Bucket
                      - /*
                - 'Fn::Join':
                    - ''
                    - - 'arn:aws:s3:::'
                      - Ref: S3Bucket
  
  AccountVerificationTableDynamoDbPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: AccountVerificationTableDynamoDbPolicy
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:CreateTable
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:UpdateTable
              - dynamodb:PutItem
              - dynamodb:DescribeStream
              - dynamodb:List*
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:DescribeReservedCapacity*
              - dynamodb:DescribeLimits
              - dynamodb:DescribeTimeToLive
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AccountVerificationTable"
  
  emailTokenSNStopic:
    Type: "AWS::SNS::Topic"
    DependsOn: awsLambdaSESFunction
    Properties:
      Subscription:
        - Endpoint: !GetAtt
            - awsLambdaSESFunction
            - Arn
          Protocol: lambda
      TopicName: emailTokenSNStopic

  emailTokenSNStopicPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn: emailTokenSNStopic
    Properties:
      ManagedPolicyName: emailTokenSNStopicPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowEC2ToPublishToSNSTopic
            Effect: Allow
            Action:
              - "sns:Publish"
              - "sns:CreateTopic"
            Resource: !Ref emailTokenSNStopic
            

  #creating IAM roles:
  # Updating the IAM role to get Cloud watch agent role as well
  ec2RoleWithAccessToCodedeployS3LambdaCloudWatch:
    Type: AWS::IAM::Role
    Description: The ec2RoleWithAccessToCodedeployS3LambdaCloudWatch is combining the s3 policy needed for code-deploy-bucket & image upload bucket
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codedeploy.amazonaws.com
                - streams.metrics.cloudwatch.amazonaws.com
                - cloudwatch-crossaccount.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      RoleName: EC2-CSYE6225
      ManagedPolicyArns:
        - !Ref s3policy
        - !Ref CodeDeployEC2S3Policy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy 
        - !Ref emailTokenSNStopicPolicy
        - !Ref AccountVerificationTableDynamoDbPolicy

  #creating a instance profile:
  instanceEC2Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles:
        - !Ref ec2RoleWithAccessToCodedeployS3LambdaCloudWatch


  loadbalSecGrp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: load balancer security group
      GroupDescription: The security groupp created for web server to hit the API
      VpcId: !Ref VirtualPrivateCloudVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        
  loadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub ${AWS::StackName}-load-balancer
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadbalSecGrp
      Subnets:
        - !Ref subnetA
        - !Ref subnetB
        - !Ref subnetC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer

  loadBalTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '3000'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4      
      Name: !Sub '${AWS::StackName}-LBTargetGrp'
      TargetType: instance
      Port: 3000
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lb-TargetGroup'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'          
      UnhealthyThresholdCount: 2
      VpcId: !Ref VirtualPrivateCloudVPC

# Routing 80 to the right port      
  loadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalTG
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP  


# instance config for every launch
  InstanceLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      LaunchConfigurationName: asg_launch_config
      PlacementTenancy: default
      InstanceType: t2.micro
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref instanceEC2Profile
      ImageId: !Ref MyImageParameter
      SecurityGroups:
        - !Ref applicationSecurityGroup
      KeyName: !Ref KeyPairParameter
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: '20'
      EbsOptimized: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo touch /tmp/webservice/.env
          sudo chmod -R 777 /tmp/webservice/.env
          sudo chown ec2-user:ec2-user /tmp/webservice/.env
          sudo echo 'DB_HOSTNAME=${dbinstance.Endpoint.Address}' >> /tmp/webservice/.env
          sudo echo 'DB_USER=${dbuserdetails}' >> /tmp/webservice/.env
          sudo echo 'PASSWORD=${dbpassword}' >> /tmp/webservice/.env
          sudo echo 'AWS_BUCKET_NAME=${S3Bucket}' >> /tmp/webservice/.env
          sudo echo 'DB_NAME=${DatabaseName}' >> /tmp/webservice/.env
          sudo echo 'AWS_BUCKET_REGION=${regionforbucket}' >> /tmp/webservice/.env
          sudo echo 'EMAIL_TOPIC_ARN=arn:aws:sns:${AWS::Region}:${AWS::AccountId}:emailTokenSNStopic' >> /tmp/webservice/.env          
          sudo echo 'DOMAIN_NAME=${DomainNameParameter}' >> /tmp/webservice/.env
          sudo echo 'NODE_ENV=demo' >> /tmp/webservice/.env
          sleep 35
          cd /tmp/webservice
          sudo npm run db-migrate
          sleep 10
          
          
# Auto scle grp
  autoScaleGrp:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Sub '${AWS::StackName}-asg'
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c      
      Cooldown: '60'
      HealthCheckType: EC2
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref InstanceLaunchConfig
      MinSize: '2'
      MaxSize: '5'
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      TargetGroupARNs:
        - !Ref loadBalTG
      TerminationPolicies:
        - OldestInstance
        - Default
      VPCZoneIdentifier:
        - !Ref subnetA
        - !Ref subnetB
        - !Ref subnetC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-asg'
          PropagateAtLaunch: true
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: true

#Autoscaling scale up policy:          
  ScaleUpPolicyApp:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScaleGrp
      Cooldown: '60'
      ScalingAdjustment: '1'

#Autoscaling scale down policy:      
  ScaleDownPolicyApp:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScaleGrp
      Cooldown: '60'
      ScalingAdjustment: '-1'

#CPU utilization for 
  ScaleUpCPUUtil:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '5'
      AlarmActions:
        - !Ref ScaleUpPolicyApp
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScaleGrp
      ComparisonOperator: GreaterThanThreshold

#CPU utilization for above policy to trigger for Scaling down:
  ScaleDownCPUUtil:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 3% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '3'
      AlarmActions:
        - !Ref ScaleDownPolicyApp
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScaleGrp
      ComparisonOperator: LessThanThreshold

#creating an alias for the loadbalancer to point to our domain name:
  RecordDomainNameServer:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Ref DomainNameParameter
      Type: A
      HostedZoneId: !Ref hostedZoneID
      AliasTarget:
        DNSName: !GetAtt 
          - loadBalancer
          - DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt 
          - loadBalancer
          - CanonicalHostedZoneID
  # Code Deploy Setup
  CsyeCodeDeploy:
    Type: 'AWS::CodeDeploy::Application'  
    Properties:
      ApplicationName: 'csye6225-webapp'
      ComputePlatform: 'Server'   
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-csye-code-dploy'

  #Code Deploy Role
  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: CodeDeployServiceRole
            Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      RoleName: CodeDeployServiceRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-CodeDeployServiceRole"
 
  


  # Code Deployment Group Setup
  CsyeCodeDeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ServiceRoleArn: !GetAtt
                    - CodeDeployServiceRole
                    - Arn
      ApplicationName: !Ref CsyeCodeDeploy
      AutoRollbackConfiguration: 
        Enabled: true
        Events:
          - "DEPLOYMENT_FAILURE" 
      AutoScalingGroups: 
        - !Ref autoScaleGrp
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key: Application Role
          Value: Web server          
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: 'csye6225-webapp-deployment'  
      DeploymentStyle: 
        DeploymentType: 'IN_PLACE'
        DeploymentOption: 'WITHOUT_TRAFFIC_CONTROL'

  AccountVerificationTableId:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: AccountVerificationTable
      AttributeDefinitions:
        - AttributeName: accountVerificationID
          AttributeType: S
        - AttributeName: expireUnix
          AttributeType: N          
      KeySchema:
        - AttributeName: accountVerificationID
          KeyType: HASH
        - AttributeName: expireUnix
          KeyType: RANGE  
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TimeToLiveSpecification:
        AttributeName: expireUnix
        Enabled: true

  #creating dynamoDB:
  SentEmailTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: SentEmailTable
      AttributeDefinitions:
        - AttributeName: existingEmailId
          AttributeType: S
      KeySchema:
        - AttributeName: existingEmailId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      
  lambdaPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    DependsOn: emailTokenSNStopic
    Properties:
      ManagedPolicyName: lambdaPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: LambdaDynamoDBAccess
            Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:Scan"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/SentEmailTable"
          - Sid: LambdaSESAccess
            Effect: Allow
            Action:
              - "ses:VerifyEmailAddress"
              - "ses:SendEmail"
              - "ses:SendRawEmail"
            Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
          - Sid: LambdaS3Access
            Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::serverless.${DomainNameParameter}/*"
          - Sid: LambdaSNSAccess
            Effect: Allow
            Action:
              - "sns:ConfirmSubscription"
            Resource: !Ref emailTokenSNStopic
      Roles:
        - !Ref lambdaExecutionRole

  #creating role for Lambda:
  lambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      RoleName: LambdaExecutionRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LambdaExecutionRoleId"


  awsLambdaSESFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: emailHandler
      Code:
        S3Bucket: serverless-code-deploy-bucket
        S3Key: csye6225lambda.zip
      Handler: index.handler
      Environment:
        Variables:
          domain: !Ref DomainNameParameter
          table: !Ref SentEmailTable
      Role: !GetAtt
        - lambdaExecutionRole
        - Arn
      Runtime: nodejs14.x
      MemorySize: 256
      Timeout: 180
      ReservedConcurrentExecutions: 5
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Email"
        - Key: Application Role
          Value: Email Lambda

  #creating permission for lambda:
  lambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: awsLambdaSESFunction
    Properties:
      FunctionName: !Ref awsLambdaSESFunction
      Action: "lambda:InvokeFunction"
      Principal: sns.amazonaws.com
      SourceArn: !Ref emailTokenSNStopic




          
#EC2 Instance
  # ec2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !Ref MyImageParameter
  #     IamInstanceProfile: !Ref instanceEC2Profile
  #     DisableApiTermination: false
  #     InstanceType: t2.micro
  #     BlockDeviceMappings:
  #       - DeviceName: "/dev/xvda"
  #         Ebs:
  #           VolumeSize: 20
  #           VolumeType: gp2
  #     NetworkInterfaces: 
  #       - SubnetId: !Ref subnetA
  #         AssociatePublicIpAddress: true
  #         DeviceIndex: 0
  #         GroupSet: [!Ref applicationSecurityGroup]
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         sudo touch /tmp/webservice/.env
  #         sudo chmod -R 777 /tmp/webservice/.env
  #         sudo chown ec2-user:ec2-user /tmp/webservice/.env
  #         sudo echo 'DB_HOSTNAME=${dbinstance.Endpoint.Address}' >> /tmp/webservice/.env
  #         sudo echo 'DB_USER=${dbuserdetails}' >> /tmp/webservice/.env
  #         sudo echo 'PASSWORD=${dbpassword}' >> /tmp/webservice/.env
  #         sudo echo 'AWS_BUCKET_NAME=${S3Bucket}' >> /tmp/webservice/.env
  #         sudo echo 'DB_NAME=${DatabaseName}' >> /tmp/webservice/.env
  #         sudo echo 'AWS_ACCESS_KEY_ID=${accesskey}' >> /tmp/webservice/.env
  #         sudo echo 'AWS_SECRET_ACCESS_KEY=${secretkey}' >> /tmp/webservice/.env
  #         sudo echo 'AWS_BUCKET_REGION=${regionforbucket}' >> /tmp/webservice/.env
  #         sudo echo 'NODE_ENV=demo' >> /tmp/webservice/.env
  #         sleep 60
  #         cd /tmp/webservice
  #         sudo npm run db-migrate    
 

# Generating output on Cloud Formation
Outputs:
  VpcId:
    Description: Virtual Private Cloud
    Value: !Ref VirtualPrivateCloudVPC
    Export:
      Name: !Sub ${AWS::StackName}-VirtualPrivateCloud
  subnetAId:
    Description: Subnet A 
    Value: !Ref subnetA
    Export:
      Name: !Sub ${AWS::StackName}-subnetA
  subnetBId:
    Description: Subnet B
    Value: !Ref subnetB
    Export:
      Name: !Sub ${AWS::StackName}-subnetB
  subnetCId:
    Description: Subnet C
    Value: !Ref subnetC
    Export:
      Name: !Sub ${AWS::StackName}-subnetC